{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9bd6dd9a-a0f6-4248-89d4-657c318e0d79",
   "metadata": {},
   "source": [
    "# Tutorial 04: Links and Data Collection"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c18bd9e-7470-4b09-b7a7-fac8bb2dec17",
   "metadata": {},
   "source": [
    "## Tutorial Description"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7e48aef-41be-4597-be37-1bd196bc97a5",
   "metadata": {},
   "source": [
    "This tutorial covers how to:\n",
    "1. Extracting state data of a particular link of a URDF object.\n",
    "2. Extracting the mass of a particular link of a URDF object.\n",
    "3. Storing data collected during simulation.\n",
    "4. Creating a plot of the simulation data after the simulation has terminated."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be64a904-72de-4411-8a77-37a630f0c3a4",
   "metadata": {},
   "source": [
    "## Imports"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ca5c838-ffae-45eb-9e60-0ad1e0ac8698",
   "metadata": {},
   "source": [
    "To begin, we import the same modules for the same reasons as tutorial 00. We also include `numpy` and `matplotlib.pyplot` for data collection and visualization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b2b6dc1e-8420-4242-91a3-e73422ce713e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from condynsate import Simulator as con_sim\n",
    "from condynsate import __assets__ as assets\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dea83d70-5877-4057-b588-983d28579958",
   "metadata": {},
   "source": [
    "## Building the Project Class"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "507fb740-3a04-4ff7-af5e-fbbd3c73f962",
   "metadata": {},
   "source": [
    "We now create a `Project` class with `__init__` and `run` functions. In `__init__` a pendulum is loaded using the same technique as tutorial 02. In `run`, we cover one way to collect data during the simulation that is available to users after the simulation completes. Futhermore, `Project` includes two additional functions, `_add_data_point` and `plot_data`. `_add_data_point` is what we use to collect and store simulation data during the simulation and `plot_data` is what we use to generate a plot of those data after the simulation is complete."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "098a10b0-6cec-4676-8cd2-1ac6b47ad94b",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Project():\n",
    "    def __init__(self):\n",
    "        '''\n",
    "        ##################################################################\n",
    "        Differently that the previous tutorials, we have asked the \n",
    "        simulator to use a smaller time step than the default value of \n",
    "        0.01 seconds. Doing this will increase the simulation accuracy at\n",
    "        the expense of real-time execution time.\n",
    "        ##################################################################\n",
    "        '''\n",
    "        # Create a instance of the simulator\n",
    "        self.s = con_sim(animation = False,\n",
    "                         keyboard = False,\n",
    "                         dt = 0.0075)\n",
    "        \n",
    "        # Load the pendulum in the orientation we want\n",
    "        self.pendulum = self.s.load_urdf(urdf_path = assets['pendulum'],\n",
    "                                         position = [0., 0., 0.05],\n",
    "                                         yaw = 1.571,\n",
    "                                         wxyz_quaternion = [1., 0., 0., 0],\n",
    "                                         fixed = True,\n",
    "                                         update_vis = True)\n",
    "\n",
    "        '''\n",
    "        ##################################################################\n",
    "        Differently that the previous tutorials, we set the initial \n",
    "        velocity instead of initial angle.\n",
    "        ##################################################################\n",
    "        '''\n",
    "        # Set the initial angular velocity of the pendulum arm\n",
    "        self.s.set_joint_velocity(urdf_obj = self.pendulum,\n",
    "                                  joint_name = 'chassis_to_arm',\n",
    "                                  velocity = 1.571,\n",
    "                                  initial_cond = True,\n",
    "                                  physics = False)\n",
    "        \n",
    "    def run(self, max_time=None):\n",
    "        '''\n",
    "        ##################################################################\n",
    "        This run function does all the same basic functions as in \n",
    "        tutorial 02 but with the added functionality of data collection.\n",
    "        ##################################################################\n",
    "        '''\n",
    "        # Create an empty dictionary of data to store simulation data\n",
    "        data = {'angle' : [],\n",
    "                'angle_vel' : [],\n",
    "                'KE' : [],\n",
    "                'PE' : [],\n",
    "                'time' : [],}\n",
    "        \n",
    "        # Reset the simulator.\n",
    "        self.s.reset()\n",
    "\n",
    "        '''\n",
    "        ##############################################################\n",
    "        To add a data point at the initial time step to the data\n",
    "        structure, we call the _add_data_point function.\n",
    "        ##############################################################\n",
    "        '''\n",
    "        # Add the simulation data at the current time\n",
    "        data = self._add_data_point(data)\n",
    "        \n",
    "        # Run the simulation loop until done\n",
    "        while(not self.s.is_done):            \n",
    "            '''\n",
    "            ##############################################################\n",
    "            Note that, compared to the previous tutorials, this time when\n",
    "            we call condynsate.simulator.step we store its return value. \n",
    "            condynsate.simulator.step gives a different return value \n",
    "            based on different situations. These return values are as \n",
    "            follows:\n",
    "                -4: Keyboard LOS indicating simulation step failure. No \n",
    "                    simulation step taken. No further simulation steps are to\n",
    "                    be taken. is_done flag is now true.\n",
    "                -3: User initiated simulation termination. No simulation step \n",
    "                    taken. No further simulation steps are to be taken. \n",
    "                    is_done flag is now true.\n",
    "                -2: User initiated pause is occuring. No simulation step taken.\n",
    "                    paused flag remains true.\n",
    "                -1: User initiated pause has ended. No simulation step taken. \n",
    "                    paused flag is now false.\n",
    "                0:  User initiated simulation reset. No simulation step taken.\n",
    "                1:  Normal and successful simulation step.\n",
    "                2:  User initiated pause has started. Normal simulation step \n",
    "                    taken. paused flag is now true.\n",
    "                3:  max_time is now reached. Normal simulation step taken. No \n",
    "                    further simulation steps are to be taken. is_done flag is\n",
    "                    now true.\n",
    "            We want to keep track of these because if the simulation is \n",
    "            reset we will need to empty out all of the simulation data \n",
    "            that we have already collected, and if no simulation step was\n",
    "            taken, we don't want to collect any new data.\n",
    "            ##############################################################\n",
    "            '''\n",
    "            # Take a single physics step.\n",
    "            ret_code = self.s.step(max_time = max_time)\n",
    "\n",
    "            '''\n",
    "            ##############################################################\n",
    "            A ret_code greater than 0 indicates that a simulation step was\n",
    "            taken and the new data was created and can be added.\n",
    "            ##############################################################\n",
    "            '''\n",
    "            # Add the simulation data at the current time if step was taken\n",
    "            if ret_code > 0:\n",
    "                data = self._add_data_point(data)\n",
    "            \n",
    "            '''\n",
    "            ##############################################################\n",
    "            A ret_code of 0 indicates the simulation was reset and we need\n",
    "            to reset the data also.\n",
    "            ##############################################################\n",
    "            '''\n",
    "            # Reset data collection if sim is reset.\n",
    "            if ret_code == 0:\n",
    "                data = {'angle' : [],\n",
    "                        'angle_vel' : [],\n",
    "                        'KE' : [],\n",
    "                        'PE' : [],\n",
    "                        'time' : [],}\n",
    "        \n",
    "        # Return the data\n",
    "        return data\n",
    "\n",
    "    '''\n",
    "    ######################################################################\n",
    "    This function is what we use to collect data points during the \n",
    "    simulation. It collects joint and link state data, calculates \n",
    "    energies, and then appends these data to our data structure. \n",
    "    ######################################################################\n",
    "    '''\n",
    "    def _add_data_point(self, data):\n",
    "        # Collect the state of the joint\n",
    "        state = self.s.get_joint_state(urdf_obj = self.pendulum,\n",
    "                                       joint_name = 'chassis_to_arm')\n",
    "\n",
    "        # Extract angle and angular velocity of the joints\n",
    "        angle = state['position'] * 57.296\n",
    "        angle_vel = state['velocity'] * 57.296\n",
    "        \n",
    "        '''\n",
    "        ##################################################################\n",
    "        To collect the state of a specific link in a URDF object we call\n",
    "        condynsate.simulator.get_link_state. This works for either the \n",
    "        base link or any children links and takes the following \n",
    "        arguments:\n",
    "            urdf_obj : URDF_Obj\n",
    "                A URDF_Obj whose state is being measured.\n",
    "            link_name : string\n",
    "                The name of the link whose state is measured. The link\n",
    "                name is specified in the .urdf file.\n",
    "            body_coords : bool\n",
    "                A boolean flag that indicates whether the passed \n",
    "                velocities are in world coords or body coords.\n",
    "        \n",
    "        It then returns:\n",
    "            state : a dictionary with the following keys:\n",
    "                'position' : array-like, shape (3,)\n",
    "                    The (x,y,z) world coordinates of the link.\n",
    "                'roll' : float\n",
    "                    The Euler angle roll of the link\n",
    "                    that defines the link's orientation in the world. \n",
    "                    Rotation of the link about the world's x-axis.\n",
    "                'pitch' : float\n",
    "                    The Euler angle pitch of the link\n",
    "                    that defines the link's orientation in the world.\n",
    "                    Rotation of the link about the world's y-axis.\n",
    "                'yaw' : float\n",
    "                    The Euler angle yaw of the link\n",
    "                    that defines the link's orientation in the world. \n",
    "                    Rotation of the link about the world's z-axis.\n",
    "                'R of world in link' : array-like, shape(3,3):\n",
    "                    The rotation matrix that takes vectors in world \n",
    "                    coordinates to link coordinates. For example, \n",
    "                    let V_inL be a 3vector written in link coordinates. \n",
    "                    Let V_inW be a 3vector written in world coordinates.\n",
    "                    Then: V_inL = R_ofWorld_inLink @ V_inW\n",
    "                'velocity' : array-like, shape (3,)\n",
    "                    The (x,y,z) linear velocity in world coordinates of \n",
    "                    the link.\n",
    "                'angular velocity' : array-like, shape (3,)\n",
    "                    The (x,y,z) angular velocity in world coordinates of \n",
    "                    the link.\n",
    "        ##################################################################\n",
    "        '''\n",
    "        # Retrieve the state of the mass at the end of the rod\n",
    "        state = self.s.get_link_state(urdf_obj = self.pendulum,\n",
    "                                      link_name = 'mass',\n",
    "                                      body_coords = True)\n",
    "        \n",
    "        '''\n",
    "        ##################################################################\n",
    "        To collect the mass of a specific link in a URDF object we call\n",
    "        condynsate.simulator.get_link_mass. This works for either the \n",
    "        base link or any children links and takes the following \n",
    "        arguments:\n",
    "            urdf_obj : URDF_Obj\n",
    "                A URDF_Obj that contains that link whose mass is \n",
    "                measured.\n",
    "            link_name : string\n",
    "                The name of the link whose mass is measured. The link \n",
    "                name is specified in the .urdf file.\n",
    "                \n",
    "        It then returns:\n",
    "            mass : float\n",
    "                The mass of the link in Kg. If link is not found, \n",
    "                returns none.\n",
    "        ##################################################################\n",
    "        '''\n",
    "        # Get the mass of the mass\n",
    "        mass = self.s.get_link_mass(urdf_obj = self.pendulum,\n",
    "                                    link_name = 'mass')\n",
    "            \n",
    "        '''\n",
    "        ##################################################################\n",
    "        Finally, we use the collected link and joint data to add a single \n",
    "        data point to our data structure. This is done by appending the \n",
    "        calculated data to the end of its respective list.\n",
    "        ##################################################################\n",
    "        '''\n",
    "        # Calculate the energy of the mass\n",
    "        height = state['position'][2]\n",
    "        vel = state['velocity']\n",
    "        KE = 0.5*mass*vel.T@vel\n",
    "        PE = mass*9.81*height\n",
    "        \n",
    "        # Append the data to the list\n",
    "        data['angle'].append(angle)\n",
    "        data['angle_vel'].append(angle_vel)\n",
    "        data['KE'].append(KE)\n",
    "        data['PE'].append(PE)\n",
    "        data['time'].append(self.s.time) # This is how we get the current \n",
    "                                         # simulation time\n",
    "        \n",
    "        # Return the new data list\n",
    "        return data\n",
    "    \n",
    "    '''\n",
    "    ######################################################################\n",
    "    The specifics of _plot_data are outside the scope of a condynsate\n",
    "    tutorial. See https://matplotlib.org/ for more information.\n",
    "    ######################################################################\n",
    "    '''\n",
    "    def plot_data(self, data):\n",
    "        # Make the plot and subplots\n",
    "        fig, (ax1, ax2) = plt.subplots(nrows=2, ncols=1)\n",
    "        \n",
    "        # Plot the phase space\n",
    "        ax1.plot(data['angle'], data['angle_vel'], c='k', lw=2.5)\n",
    "        ax1.set_xlabel('Angle [Deg]')\n",
    "        ax1.set_ylabel('Angle Rate [Deg / Sec]')\n",
    "        \n",
    "        # Plot the energy\n",
    "        ax2.plot(data['time'], data['KE'], label='KE', c='m', lw=2.5)\n",
    "        ax2.plot(data['time'], data['PE'], label='PE', c='c', lw=2.5)\n",
    "        total_E = np.array(data['KE']) + np.array(data['PE'])\n",
    "        ax2.plot(data['time'], total_E, label='Total', c='k', lw=2.5, ls=':')\n",
    "        ax2.legend(fancybox=True, shadow=True)\n",
    "        ax2.set_xlabel('Time [Sec]')\n",
    "        ax2.set_ylabel('Energy [J]')\n",
    "        \n",
    "        # Figure settings\n",
    "        fig.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "420433c6-c1d2-4702-aba4-52295bf753e2",
   "metadata": {},
   "source": [
    "## Running the Project Class"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da509ec5-56c1-4bc4-a9d0-0db238bd069a",
   "metadata": {},
   "source": [
    "Now that we have made the `Project` class, we can test it by initializing it and then calling the `run` function. Remember to press the enter key to start the simulation and the esc key to end the simulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a9461fb2-213e-4b6e-92c0-d0fb1ad00176",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You can open the visualizer by visiting the following URL:\n",
      "http://127.0.0.1:7004/static/\n"
     ]
    }
   ],
   "source": [
    "# Create an instance of the Project class. \n",
    "proj = Project()\n",
    "\n",
    "# Run the simulation.\n",
    "data = proj.run(max_time = 5.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "aa752c78-5346-4107-93c0-ffce15ec37f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the data collected\n",
    "%matplotlib inline\n",
    "proj.plot_data(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36d1e2de-e3f4-4dfb-a530-766a4420f876",
   "metadata": {},
   "source": [
    "## Challenge"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ff6e017-b96d-4668-879d-5ebaf083ae88",
   "metadata": {},
   "source": [
    "This tutorial is now complete. For an additional challenge, try creating a similar project but using the double pendulum provided in the condynsate default assests."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
